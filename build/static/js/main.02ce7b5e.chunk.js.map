{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["TextArea","Input","componentToHex","c","hex","toString","length","rgbToHex","r","g","b","toArduinoString","leds","ret","i","color","fadePoint","substring","getGradient","color1","color2","segments","col1","col2","generate","map","col","replace","split","parseInt","randomHexColor","Math","random","App","props","handleSelection","id","val","state","selectedLed","setState","tempColor","fadePoints","stripPin","this","grads","grad","splice","concat","ledsAr","fp","find","fdp","undefined","selectedLedIsFadePoint","isLeftSlotFree","isRightSlotFree","className","onClick","e","target","currentTarget","style","marginRight","title","newAr","elt","type","filter","push","sort","a","marginLeft","width","min","onChange","value","Number","isNaN","dif","lastElt","led","key","role","tabIndex","onKeyPress","backgroundColor","border","newTempColor","onAccept","onCancel","marginTop","message","arduinoString","arduiAr","trim","jsonAr","JSON","parse","newFadePoints","forEach","fromArduinoString","err","notification","description","console","log","textAlign","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.02ce7b5e.chunk.js","sourcesContent":["import React from 'react';\nimport { PhotoshopPicker } from 'react-color';\nimport {\n  InputNumber, Button, Input, Icon, notification,\n} from 'antd';\nimport './App.css';\nimport generate from 'color-gradient';\n\nconst { TextArea } = Input;\n\nconst openNotif = (type, title, message) => {\n  notification[type]({\n    message: title,\n    description:\n      message,\n  });\n};\n\nconst componentToHex = (c) => {\n  const hex = c.toString(16);\n  return hex.length === 1 ? `0${hex}` : hex;\n};\n\nconst rgbToHex = (r, g, b) => `#${componentToHex(r)}${componentToHex(g)}${componentToHex(b)}`;\n\nconst toArduinoString = (leds) => {\n  let ret = `int colors[${leds.length}][4] = {`;\n  for (let i = 0; i < leds.length; i += 1) {\n    ret += `{${leds[i].color[0]},${leds[i].color[1]},${leds[i].color[2]},${leds[i].fadePoint !== null ? 1 : 0}},`;\n  }\n  ret = ret.substring(0, ret.length - 1);\n  ret += '};';\n  return (ret);\n};\n\nconst fromArduinoString = (arduinoString) => {\n  let arduiAr = arduinoString.split('=')[1].trim();\n  arduiAr = arduiAr.substring(0, arduiAr.length - 1).replace(/{/g, '[').replace(/}/g, ']');\n  const jsonAr = JSON.parse(arduiAr);\n  const newFadePoints = [];\n  jsonAr.forEach((led, i) => {\n    if (led[3] === 1) {\n      newFadePoints.push({ color: rgbToHex(led[0], led[1], led[2]), id: i });\n    }\n  });\n  return (newFadePoints);\n};\n\nconst getGradient = (color1, color2, segments) => {\n  const col1 = color1;\n  const col2 = color2;\n  const colors = generate(col1, col2, segments).map((col) => col.substring(4, col.length - 1).replace(/ /g, '').split(','));\n  return (colors.map((col) => col.map((c) => parseInt(c, 10))));\n};\n\nconst randomHexColor = () => (rgbToHex(parseInt(Math.random() * 255, 10), parseInt(Math.random() * 255, 10), parseInt(Math.random() * 255, 10)));\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedLed: -1,\n      fadePoints: [{ color: randomHexColor(), id: 0 }, { color: randomHexColor(), id: parseInt(Math.random() * 8 + 2, 10) }, { color: randomHexColor(), id: parseInt(Math.random() * 20 + 10, 10) }],\n      tempColor: null,\n      stripPin: 6,\n    };\n  }\n\n  handleSelection=(id) => {\n    const { selectedLed } = this.state;\n    let val = id;\n    if (selectedLed === id) {\n      val = -1;\n    }\n    this.setState({\n      selectedLed: val,\n      tempColor: null,\n    });\n  }\n\n  render() {\n    const {\n      fadePoints, selectedLed, tempColor, stripPin,\n    } = this.state;\n    let grads = [];\n    for (let i = 1; i < fadePoints.length; i += 1) {\n      const grad = getGradient(fadePoints[i - 1].color, fadePoints[i].color, (fadePoints[i].id - fadePoints[i - 1].id) - 1);\n      if (i > 1) {\n        grad.splice(0, 1);\n      }\n      grads = grads.concat(grad);\n    }\n\n    const ledsAr = grads.map((color, i) => {\n      const fp = fadePoints.find((fdp) => (fdp.id === i));\n      return ({\n        color,\n        fadePoint: fp !== undefined ? { color: fp.color } : null,\n      });\n    });\n    const selectedLedIsFadePoint = (selectedLed > -1 && ledsAr[selectedLed].fadePoint !== null);\n    const isLeftSlotFree = selectedLed > 0 && ledsAr[selectedLed - 1].fadePoint === null;\n    const isRightSlotFree = selectedLed > 0 && selectedLed < ledsAr.length - 1 && ledsAr[selectedLed + 1].fadePoint === null;\n    return (\n      <div\n        className=\"App\"\n        onClick={(e) => {\n          if (e.target === e.currentTarget) {\n            this.handleSelection(-1);\n          }\n        }}\n      >\n        <div\n          className=\"header\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              this.handleSelection(-1);\n            }\n          }}\n        >\n          Arduino Neopixel code generator online\n        </div>\n        {selectedLed === 0 || selectedLed === fadePoints[fadePoints.length - 1].id ? <div className=\"control\" /> : (\n          <div\n            className=\"control\"\n          >\n            {selectedLed > -1 ? (\n              <>\n                {!selectedLedIsFadePoint || !isLeftSlotFree ? null : (\n                  <Button\n                    style={{ marginRight: 10 }}\n                    title=\"Shift the fade point to the left\"\n                    onClick={(e) => {\n                      const newAr = fadePoints.concat();\n                      newAr.find((elt) => elt.id === selectedLed).id = selectedLed - 1;\n                      this.setState({\n                        fadePoints: newAr,\n                        selectedLed: selectedLed - 1,\n                      });\n                    }}\n                  >\n                    <Icon type=\"arrow-left\" />\n                  </Button>\n                )}\n                <Button\n                  type={selectedLedIsFadePoint ? 'danger' : 'primary'}\n                  onClick={() => {\n                    if (selectedLedIsFadePoint) {\n                      let newAr = fadePoints.concat();\n                      newAr = newAr.filter((c) => (c.id !== selectedLed));\n                      this.setState({\n                        fadePoints: newAr,\n                      });\n                    } else {\n                      let newAr = fadePoints.concat();\n                      newAr.push({ color: rgbToHex(ledsAr[selectedLed].color[0], ledsAr[selectedLed].color[1], ledsAr[selectedLed].color[2]), id: selectedLed });\n                      newAr = newAr.sort((a, b) => (a.id > b.id));\n                      this.setState({\n                        fadePoints: newAr,\n                      });\n                    }\n                  }}\n                >\n                  {selectedLedIsFadePoint ? 'Delete fade point' : 'Create fade point'}\n                </Button>\n                {!selectedLedIsFadePoint || !isRightSlotFree ? null : (\n                  <Button\n                    style={{ marginLeft: 10 }}\n                    title=\"Shift the fade point to the right\"\n                    onClick={() => {\n                      const newAr = fadePoints.concat();\n                      newAr.find((elt) => elt.id === selectedLed).id = selectedLed + 1;\n                      this.setState({\n                        fadePoints: newAr,\n                        selectedLed: selectedLed + 1,\n                      });\n                    }}\n                  >\n                    <Icon type=\"arrow-right\" />\n                  </Button>\n                )}\n              </>\n            ) : (\n              <label>\n                {'Strip size: '}\n                <InputNumber\n                  style={{ width: 70 }}\n                  min={2}\n                  onChange={(value) => {\n                    const val = parseInt(value, 10);\n                    if (!Number.isNaN(val) && val >= 2) {\n                      if (val < fadePoints[fadePoints.length - 1].id + 1) {\n                        const dif = (fadePoints[fadePoints.length - 1].id + 1) - val;\n                        let newAr = fadePoints.concat();\n\n                        const lastElt = newAr[newAr.length - 1];\n                        lastElt.id -= dif;\n                        newAr = newAr.filter((elt) => (elt.id < lastElt.id || elt === lastElt));\n                        this.setState({\n                          fadePoints: newAr,\n                        });\n                      } else {\n                        const dif = val - (fadePoints[fadePoints.length - 1].id + 1);\n                        const newAr = fadePoints.concat();\n                        newAr[newAr.length - 1].id = newAr[newAr.length - 1].id + dif;\n                        this.setState({\n                          fadePoints: newAr,\n                        });\n                      }\n                    }\n                  }}\n                  value={fadePoints[fadePoints.length - 1].id + 1}\n                />\n                {' '}\nleds\n              </label>\n            )}\n          </div>\n        )}\n        <div\n          className=\"ledCont\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              this.handleSelection(-1);\n            }\n          }}\n        >\n          <>\n            {\n            ledsAr.map((led, i) => (\n              <div\n                key={`led${i}`}\n                role=\"button\"\n                tabIndex={0}\n                onKeyPress={() => {\n                  this.handleSelection(i);\n                }}\n                className=\"led\"\n                style={{ backgroundColor: rgbToHex(led.color[0], led.color[1], led.color[2]), border: i !== selectedLed ? null : '3px solid black' }}\n                onClick={() => {\n                  this.handleSelection(i);\n                }}\n              />\n            ))\n          }\n            <br />\n            {\n            ledsAr.map((led, i) => (\n              <div key={`key${i}`} className=\"fadePoint\">\n                {\n                  led.fadePoint ? (\n                    '▲'\n                  ) : null\n                }\n              </div>\n            ))\n          }\n          </>\n        </div>\n        {!selectedLedIsFadePoint ? (\n          <div\n            className=\"output\"\n            onClick={(e) => {\n              if (e.target === e.currentTarget) {\n                this.handleSelection(-1);\n              }\n            }}\n          >\n            <h3>Arduino output</h3>\n            <label>\n              {'Strip pin : '}\n              <InputNumber\n                value={stripPin}\n                min={0}\n                onChange={(value) => {\n                  this.setState({ stripPin: value });\n                }}\n              />\n            </label>\n            <TextArea\n              style={{ marginTop: 10 }}\n              value={toArduinoString(ledsAr)}\n              onChange={(e) => {\n                let newAr;\n                try {\n                  newAr = fromArduinoString(e.target.value);\n                } catch (err) {\n                  openNotif('error', 'Bad format', 'The input must be a arduino declaration with same format as the output this app is generating!');\n                  console.log(err);\n                  return;\n                }\n                this.setState({\n                  fadePoints: newAr,\n                });\n              }}\n            />\n            <div style={{ textAlign: 'left' }}>\n              <pre>\n                {`\nAdafruit_NeoPixel strip = Adafruit_NeoPixel(${ledsAr.length}, ${stripPin}, NEO_GRB + NEO_KHZ800);\nstrip.begin();\nfor(uint16_t i=0; i<strip.numPixels(); i++) {\nstrip.setPixelColor(i, strip.Color(colors[i][0],colors[i][1],colors[i][2]));\n}\nstrip.show();\n              `}\n              </pre>\n            </div>\n          </div>\n        )\n          : (\n            <div className=\"colorPicker\">\n              <PhotoshopPicker\n                color={rgbToHex(ledsAr[selectedLed].color[0], ledsAr[selectedLed].color[1], ledsAr[selectedLed].color[2])}\n                onChange={(color) => {\n                  const newAr = fadePoints.concat();\n                  const led = newAr.find((elt) => elt.id === selectedLed);\n                  const newTempColor = led.color;\n                  led.color = color.hex;\n                  this.setState({\n                    fadePoints: newAr,\n                    tempColor: tempColor || newTempColor,\n                  });\n                }}\n                onAccept={() => {\n                  this.setState({\n                    tempColor: null,\n                    selectedLed: -1,\n                  });\n                }}\n                onCancel={() => {\n                  if (tempColor === null) {\n                    return;\n                  }\n                  const newAr = fadePoints.concat();\n                  newAr.find((elt) => elt.id === selectedLed).color = tempColor;\n                  this.setState({\n                    fadePoints: newAr,\n                    tempColor: null,\n                    selectedLed: -1,\n                  });\n                }}\n              />\n            </div>\n          )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}